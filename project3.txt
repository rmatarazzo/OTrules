Data Science & Analytics Project Definition (Template):

Updated: 2024.05.17

Project Name: "OT Rules"


Project and Work Product Description:  (should be 1 CONCISE paragraph, 3-7 sentences)
		Retrieve and display current overtime rules for football, basketball, hockey, and baseball across men's and women's college and professional leagues. Differentiate between preseason, regular season, and playoff overtime rules, and provide timeout and challenge details if relevant. Present all information, including an overtime countdown clock, on a web page dashboard.
		
	• Answer "This project / work product (solution) fills these gaps... 
		This project fills these gaps by providing a comprehensive solution for retrieving and displaying current overtime rules across various sports, including football, basketball, hockey, and baseball, in both men's and women's college and professional leagues. It addresses the need for easily accessible and differentiated rules for different game types (preseason, regular season, playoffs), along with timeout and challenge details, if applicable. Additionally, it offers the convenience of presenting all this information on a web page dashboard, complete with an overtime countdown clock.
		
	• Main goals and problem(s) it solves.
		The main goals of this project are to streamline the process of accessing and understanding overtime rules across different sports and leagues. It solves the problem of manual search and comparison by automating the retrieval and differentiation of rules. Furthermore, it enhances user experience by presenting the information in a clear and organized manner on a web page dashboard, facilitating quick reference and decision-making during games.
	
	• Problem and Solution Workflow Diagrams (2 flowcharts "AS-IS" and "TO-BE")

		AS-IS Workflow Diagram (Textual Representation):
		AS-IS Steps:
		1. Manual Search: Users manually search for overtime rules online or in rulebooks.
			Action 1: Open search engine or rulebook.
			Action 2: Search for specific sport and league overtime rules.
		2. Data Gathering: Users gather information from various sources.
			Action 1: Visit multiple websites or pages in rulebooks.
			Action 2: Collect and note down relevant information.
		3. Manual Comparison: Users manually compare rules across different sources.
			Action 1: Identify differences in rules for preseason, regular season, and playoffs.
			Action 2: Note variations in rules for men’s and women’s leagues.
		4.Manual Differentiation: Users differentiate rules for various game types.
			Action 1: Separate rules for preseason, regular season, and playoffs.
			Action 2: Highlight specific rules for timeouts and challenges.
		5. Manual Presentation: Users manually compile information.
			Action 1: Create a document or presentation with gathered data.
			Action 2: Manually set up any visual aids like countdown clocks.

		TO-BE Workflow Diagram (Textual Representation):
		flowchart TD
    		TO-BE Steps:
		1. User Input Collection: The system collects user preferences.
			Action 1: User selects sport, league, and game type on the web interface.
			Action 2: User submits their preferences.
		2. Database Query: The system queries the database for relevant overtime rules.
			Action 1: Fetch rules based on user input.
			Action 2: Retrieve details for men’s and women’s leagues.
		3. Data Differentiation: The system formats rules for different game types.
			Action 1: Differentiate rules for preseason, regular season, and playoffs.
			Action 2: Structure rules for clear display.
		4. Timeouts and Challenges Extraction: The system extracts relevant information.
			Action 1: Identify timeouts and challenges.
			Action 2: Format this information for display.
		5. Countdown Clock Setup: The system initializes a countdown clock.
			Action 1: Determine the duration of the overtime period.
			Action 2: Set up and display the countdown clock.
		6. Web Page Display: The system displays all information on the web dashboard.
			Action 1: Present rules, timeouts, and challenges.
			Action 2: Display the countdown clock on the dashboard.


    "A problem clearly stated is a problem half-solved." - Dorothea Brande :
	


Description of Solution:  (should be CONCISE, 3-7 sentences)

	The solution retrieves and displays current overtime rules for football, basketball, hockey, and baseball across men's and women's college and professional leagues. It automates the process by querying a database based on user input, differentiating rules for preseason, regular season, and playoffs, and extracting details on timeouts and challenges. All information, including an overtime countdown clock, is presented clearly on a web page dashboard, providing a streamlined and user-friendly experience for quick reference and decision-making during games.

	• Software functions for solving problem(s) step by step.
	
		1. User Input Collection
			Function Name: get_user_input()
			Purpose: Collect user preferences for sport, league, and game type.
			Details: This function prompts the user to select a sport (football, basketball, hockey, or baseball), a league (college or professional), and a game type (preseason, regular season, or playoffs). It then returns the collected inputs for further processing.

		2. Database Query
			Function Name: query_overtime_rules(sport, league, game_type)
			Purpose: Retrieve overtime rules from the database based on user input.
			Details: This function connects to the database and constructs a query using the provided sport, league, and game type. It executes the query to fetch the relevant overtime rules and returns the results.
		
		3. Data Differentiation
			Function Name: differentiate_rules(rules)
			Purpose: Differentiate and format rules for preseason, regular season, and playoffs.
			Details: This function processes the retrieved rules to ensure they are clearly differentiated and formatted according to the game type (preseason, regular season, or playoffs). It returns the formatted rules.

		4. Timeouts and Challenges Extraction
			Function Name: get_timeouts_and_challenges(rules)
			Purpose: Extract information about timeouts and challenges, if applicable.
			Details: This function parses the differentiated rules to extract specific details about timeouts and challenges that may apply during the overtime period. It returns the extracted information.

		5. Countdown Clock Setup
			Function Name: setup_countdown_clock(overtime_duration)
			Purpose: Initialize a countdown clock for the overtime period.
			Details: This function sets up a countdown timer based on the provided overtime duration. It initializes and configures the countdown clock, returning it for display on the web interface.

		6. Web Page Display
			Function Name: display_on_web_page(rules, timeouts, challenges, countdown_clock)
			Purpose: Display the retrieved and formatted information on a web page.
			Details: This function renders the differentiated rules, timeouts, and challenges information on the web page. Additionally, it displays the initialized countdown clock, ensuring all information is presented clearly and comprehensively on the web dashboard.

	• "Minimum Viable Product" (MVP) 1.0 delivered.  (V1.x delivered beyond MVP V1.0?)
	V1 uses dictionary database
	• Later MVP, i.e., v2, v3, vN+ functionality to be delivered?
	V2 uses an external database
	V3 outputs a realtime clock and realtime tracking of time outs and challenges 
    • Additional requirements, Graphical User Interfaces (GUI), usability, etc. for later versions
	to be determined
    
Solution Design (high-level):

High-Level Solution Design for the Program
Objective:
To create a program that retrieves, differentiates, and displays current overtime rules for football, basketball, hockey, and baseball across men's and women's college and professional leagues. The program will also provide information on timeouts and challenges and display an overtime countdown clock on a web page dashboard.

Components and Workflow:
User Interface (UI)

Web Page Dashboard:
Input Forms: Allow users to select sport, league, and game type.
Display Area: Show retrieved rules, timeouts, challenges, and the countdown clock.
Backend Logic

User Input Handling:

Collect user preferences for sport, league, and game type.
Database Interaction:

Query the database to fetch overtime rules based on user input.
Data Processing:

Differentiate and format rules for preseason, regular season, and playoffs.
Extract specific information about timeouts and challenges.
Countdown Timer Setup:

Initialize and manage a countdown clock for the overtime period.
Data Storage

Database:
Store detailed overtime rules for different sports, leagues, and game types.
Ensure the database is structured to facilitate efficient querying and retrieval.
Detailed Steps:
User Input Collection:

User accesses the web page and selects the desired sport, league, and game type.
The input is submitted to the backend for processing.
Database Query:

Based on user input, the backend constructs a query to fetch the relevant overtime rules from the database.
The query results are returned to the backend for further processing.
Data Differentiation:

The retrieved rules are processed to differentiate and format them according to the game type (preseason, regular season, playoffs).
Timeouts and Challenges Extraction:

Specific information about timeouts and challenges is extracted from the differentiated rules.
Countdown Clock Setup:

A countdown clock is initialized based on the standard overtime duration for the selected sport and game type.
The clock is configured to count down the specified duration.
Web Page Display:

The formatted rules, timeouts, challenges, and the countdown clock are rendered on the web page dashboard.
The user can view all the relevant information clearly and interactively.
Technical Components:
Frontend:

HTML/CSS/JavaScript: For creating the web page interface and managing user interactions.
Frameworks/Libraries: Optional use of frontend frameworks like React or Vue.js for enhanced UI/UX.
Backend:

Python/Flask/Django: For handling user input, processing data, and interacting with the database.
APIs: Optional use of APIs for fetching real-time data if needed.
Database:

SQL/NoSQL Database: To store and manage overtime rules data.
Schema Design: Ensure the database schema supports efficient queries and data retrieval.

Solution Code Description (low-level design): 
	• Describe code (to help users understand it.)
	The program is designed to automate the process of retrieving, differentiating, and displaying overtime rules for various sports across different leagues and game types. It involves user input collection, database querying, data processing, countdown timer setup, and displaying the information on a web page.

	Detailed Description of Each Component:

1. User Input Collection
Function Name: get_user_input()
Description: This function prompts the user to select a sport, league, and game type. It collects these preferences and returns them for further processing.

def get_user_input():
    """
    Collect user preferences for the sport, league, and game type.
    """
    sport = input("Select sport (football, basketball, hockey, baseball): ")
    league = input("Select league (college, professional): ")
    game_type = input("Select game type (preseason, regular season, playoffs): ")
    return sport, league, game_type

2. Database Query
Function Name: query_overtime_rules(sport, league, game_type)
Description: This function constructs and executes a query to fetch overtime rules from the database based on the provided sport, league, and game type. It returns the retrieved rules.

def query_overtime_rules(sport, league, game_type):
    """
    Retrieve overtime rules from the database based on user input.
    """
    # Example mock database query (replace with actual database logic)
    rules = {
        'football': {
            'college': {'preseason': 'College football preseason OT rules...',
                        'regular_season': 'College football regular season OT rules...',
                        'playoffs': 'College football playoff OT rules...'},
            'professional': {'preseason': 'NFL preseason OT rules...',
                             'regular_season': 'NFL regular season OT rules...',
                             'playoffs': 'NFL playoff OT rules...'}
        },
        # Add rules for other sports...
    }
    return rules.get(sport, {}).get(league, {}).get(game_type, 'Rules not found')

3. Data Differentiation

Function Name: differentiate_rules(rules)
Description: This function processes the retrieved rules to ensure they are clearly differentiated for preseason, regular season, and playoffs. It returns the formatted rules.

def differentiate_rules(rules):
    """
    Differentiate and format rules for preseason, regular season, and playoffs.
    """
    # Assuming rules are already differentiated in the database, return them as-is
    return rules

4. Timeouts and Challenges Extraction

Function Name: get_timeouts_and_challenges(rules)
Description: This function extracts specific details about timeouts and challenges from the differentiated rules. It returns the extracted information.

def get_timeouts_and_challenges(rules):
    """
    Extract information about timeouts and challenges from the rules.
    """
    # Example mock extraction logic (replace with actual extraction logic)
    timeouts = "3 timeouts per team"
    challenges = "2 challenges per team"
    return timeouts, challenges

5. Countdown Clock Setup

Function Name: setup_countdown_clock(overtime_duration)
Description: This function initializes and configures a countdown clock for the overtime period based on the provided duration. It returns the initialized countdown clock.

def setup_countdown_clock(overtime_duration):
    """
    Initialize a countdown clock for the overtime period.
    """
    countdown_clock = f"{overtime_duration} minutes countdown clock"
    return countdown_clock

6. Web Page Display

Function Name: display_on_web_page(rules, timeouts, challenges, countdown_clock)
Description: This function renders the differentiated rules, timeouts, challenges, and countdown clock on a web page dashboard, ensuring all information is presented clearly.

def display_on_web_page(rules, timeouts, challenges, countdown_clock):
    """
    Display the retrieved and formatted information on a web page.
    """
    # Example mock display logic (replace with actual web display logic)
    print(f"Overtime Rules: {rules}")
    print(f"Timeouts: {timeouts}")
    print(f"Challenges: {challenges}")
    print(f"Countdown Clock: {countdown_clock}")

Main Program Execution
Main Function:

Function Name: main()
Description: This is the main function that coordinates the execution of all other functions. It collects user input, queries the database, processes the data, sets up the countdown clock, and displays the information on the web page.

def main():
    """
    Main function to run the program.
    """
    sport, league, game_type = get_user_input()
    rules = query_overtime_rules(sport, league, game_type)
    differentiated_rules = differentiate_rules(rules)
    timeouts, challenges = get_timeouts_and_challenges(differentiated_rules)
    countdown_clock = setup_countdown_clock(overtime_duration=10)  # Assume 10 minutes for example
    display_on_web_page(differentiated_rules, timeouts, challenges, countdown_clock)

if __name__ == "__main__":
    main()

Summary:
User Input Collection: Gathers user preferences for sport, league, and game type.
Database Query: Retrieves the relevant overtime rules from the database.
Data Differentiation: Formats and differentiates the rules for various game types.
Timeouts and Challenges Extraction: Extracts details about timeouts and challenges.
Countdown Clock Setup: Initializes a countdown timer for the overtime period.
Web Page Display: Renders all the information on a web page dashboard for user viewing.
This low-level design provides a detailed description of each function and its role in the overall process, ensuring a clear understanding of the program's functionality and workflow.








	• Hyperlinks to actual complete code  

Actual Working Product Code: 
    Functions, modules, packages, documentation 
    
Application Instructions:

    • Step-by-step instructions for OTHERS:
        Instructions to install, set-up, and use your software:
        Everything needed to get your solution working.   
            Software packages and tools
            Configuration, data sets, URLs, input and output folder structure, etc. 
        
    • Additional Important Guidelines for Product Usability (for others to use your work products:




